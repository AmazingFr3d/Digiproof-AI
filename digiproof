{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b9e75f7b",
   "metadata": {
    "papermill": {
     "duration": 0.005369,
     "end_time": "2025-04-24T08:17:20.051433",
     "exception": false,
     "start_time": "2025-04-24T08:17:20.046064",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "This project aims to develop a sophisticated machine learning model designed to effectively match job offers with suitable candidates based on their specific skills and qualifications. I leveraged the RandomForestClassifier, a robust and versatile algorithm from the scikit-learn library in Python, to construct a predictive model. This model examines a range of attributes from both job descriptions, such as required skills, salary, job location, and years of experience, and candidate profiles, including their prior work experience and skill sets.\n",
    "\n",
    "For the data preparation and manipulation phases, I utilised the powerful pandas library. This tool facilitated a systematic approach to organising, cleaning, and transforming the raw datasets, which is crucial for ensuring high-quality input for the model. The meticulous data preparation process significantly enhanced the modelâ€™s accuracy during training and evaluation.\n",
    "\n",
    "Given the constraints of the project timeline, the dataset employed in this project is synthetic, generated through the code snippet provided below. This synthetic dataset serves as a stand-in, allowing for preliminary testing and validation. Once a real dataset becomes available, it can be seamlessly integrated into the model for future enhancements and more realistic performance assessments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45afab2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:20.061997Z",
     "iopub.status.busy": "2025-04-24T08:17:20.061679Z",
     "iopub.status.idle": "2025-04-24T08:17:20.076252Z",
     "shell.execute_reply": "2025-04-24T08:17:20.075200Z"
    },
    "papermill": {
     "duration": 0.021894,
     "end_time": "2025-04-24T08:17:20.078207",
     "exception": false,
     "start_time": "2025-04-24T08:17:20.056313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%script false --no-raise-error # Remove this line to run this cell \n",
    "!pip install -U scikit-learn imbalanced-learn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a850b720",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:20.089321Z",
     "iopub.status.busy": "2025-04-24T08:17:20.088401Z",
     "iopub.status.idle": "2025-04-24T08:17:24.404019Z",
     "shell.execute_reply": "2025-04-24T08:17:24.402981Z"
    },
    "papermill": {
     "duration": 4.322931,
     "end_time": "2025-04-24T08:17:24.405831",
     "exception": false,
     "start_time": "2025-04-24T08:17:20.082900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import random\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27fc9ab3",
   "metadata": {
    "papermill": {
     "duration": 0.00367,
     "end_time": "2025-04-24T08:17:24.413863",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.410193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dataset Generation\n",
    "I will generates some random data set for candodates and jobs with the code bellow as time to not parmit me to gather real world data. This dataset can easyly be swapped in future after some extra preprocessing steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8d90bfdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.423911Z",
     "iopub.status.busy": "2025-04-24T08:17:24.423379Z",
     "iopub.status.idle": "2025-04-24T08:17:24.429702Z",
     "shell.execute_reply": "2025-04-24T08:17:24.428853Z"
    },
    "papermill": {
     "duration": 0.013353,
     "end_time": "2025-04-24T08:17:24.431456",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.418103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert to DataFrame\n",
    "def pretty_report(report):\n",
    "    df_report = pd.DataFrame(report).transpose()\n",
    "    \n",
    "    # If accuracy is a single number, turn it into a row for display consistency\n",
    "    if 'accuracy' in df_report.index:\n",
    "        acc = df_report.loc['accuracy'].values[0] if isinstance(df_report.loc['accuracy'], pd.Series) else df_report.loc['accuracy']\n",
    "        df_report.loc['accuracy'] = [None, None, acc, None]\n",
    "    \n",
    "    # Display the table\n",
    "    print(df_report.fillna(\"\").round(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5feae111",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.442240Z",
     "iopub.status.busy": "2025-04-24T08:17:24.441873Z",
     "iopub.status.idle": "2025-04-24T08:17:24.450982Z",
     "shell.execute_reply": "2025-04-24T08:17:24.449996Z"
    },
    "papermill": {
     "duration": 0.017369,
     "end_time": "2025-04-24T08:17:24.453290",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.435921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%script false --no-raise-error # Remove this line to run this cell \n",
    "\n",
    "# Pools for synthetic data generation\n",
    "skills_pool = [\"Python\", \"Java\", \"SQL\", \"React\", \"AWS\", \"Django\", \"Data Analysis\", \"Machine Learning\", \"Node.js\", \"Kubernetes\"]\n",
    "locations = [\"New York\", \"Remote\", \"San Francisco\", \"Austin\", \"Chicago\", \"Seattle\"]\n",
    "\n",
    "# Generate synthetic candidates\n",
    "def generate_candidate(i):\n",
    "    return {\n",
    "        \"candidate_id\": f\"C{i:04d}\",\n",
    "        \"name\": f\"Candidate_{i}\",\n",
    "        \"skills\": \", \".join(random.sample(skills_pool, k=3)),\n",
    "        \"experience_years\": random.randint(1, 15),\n",
    "        \"preferred_location\": random.choice(locations),\n",
    "        \"expected_salary\": random.randint(50000, 150000)\n",
    "    }\n",
    "\n",
    "# Generate synthetic jobs\n",
    "def generate_job(i):\n",
    "    min_salary = random.randint(60000, 90000)\n",
    "    max_salary = min_salary + random.randint(10000, 40000)\n",
    "    return {\n",
    "        \"job_id\": f\"J{i:04d}\",\n",
    "        \"title\": random.choice([\"Software Engineer\", \"Data Scientist\", \"Web Developer\", \"DevOps Engineer\"]),\n",
    "        \"description\": \"We are looking for someone skilled in \" + \", \".join(random.sample(skills_pool, k=3)) + \".\",\n",
    "        \"required_skills\": \", \".join(random.sample(skills_pool, k=3)),\n",
    "        \"location\": random.choice(locations),\n",
    "        \"salary_min\": min_salary,\n",
    "        \"salary_max\": max_salary\n",
    "    }\n",
    "\n",
    "# Create datasets\n",
    "candidates = [generate_candidate(i) for i in range(1, 10001)]\n",
    "jobs = [generate_job(i) for i in range(1, 5000)]\n",
    "\n",
    "# Convert to DataFrames\n",
    "candidates_df = pd.DataFrame(candidates)\n",
    "jobs_df = pd.DataFrame(jobs)\n",
    "\n",
    "# Save to CSV\n",
    "candidates_path = \"/kaggle/working/synthetic_candidates.csv\"\n",
    "jobs_path = \"/kaggle/working/synthetic_jobs.csv\"\n",
    "candidates_df.to_csv(candidates_path, index=False)\n",
    "jobs_df.to_csv(jobs_path, index=False)\n",
    "\n",
    "candidates_path, jobs_path\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d59144a5",
   "metadata": {
    "papermill": {
     "duration": 0.00392,
     "end_time": "2025-04-24T08:17:24.461688",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.457768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing the Data (Candidates + Jobs\n",
    "\n",
    "I this section I will process the candidate and jobs datasets to turn the variables into numerical vectors that I can use with scikit-learn.\n",
    "\n",
    "I will do the following:\n",
    "\n",
    "- Tokenize and vectorize the text variables\n",
    "- Encode categorical variables\n",
    "- Normalize the numerical variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2be8001c",
   "metadata": {
    "papermill": {
     "duration": 0.003812,
     "end_time": "2025-04-24T08:17:24.470060",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.466248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading The datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "84e4015c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.480530Z",
     "iopub.status.busy": "2025-04-24T08:17:24.480112Z",
     "iopub.status.idle": "2025-04-24T08:17:24.565996Z",
     "shell.execute_reply": "2025-04-24T08:17:24.564947Z"
    },
    "papermill": {
     "duration": 0.093679,
     "end_time": "2025-04-24T08:17:24.568018",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.474339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "candidates_df = pd.read_csv(\"/kaggle/input/dummy-job-data/synthetic_candidates.csv\")\n",
    "jobs_df = pd.read_csv(\"/kaggle/input/dummy-job-data/synthetic_jobs.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7c456843",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.577903Z",
     "iopub.status.busy": "2025-04-24T08:17:24.577585Z",
     "iopub.status.idle": "2025-04-24T08:17:24.611137Z",
     "shell.execute_reply": "2025-04-24T08:17:24.609878Z"
    },
    "papermill": {
     "duration": 0.04051,
     "end_time": "2025-04-24T08:17:24.612918",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.572408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 6 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   candidate_id        10000 non-null  object\n",
      " 1   name                10000 non-null  object\n",
      " 2   skills              10000 non-null  object\n",
      " 3   experience_years    10000 non-null  int64 \n",
      " 4   preferred_location  10000 non-null  object\n",
      " 5   expected_salary     10000 non-null  int64 \n",
      "dtypes: int64(2), object(4)\n",
      "memory usage: 468.9+ KB\n"
     ]
    }
   ],
   "source": [
    "candidates_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "360707a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.623060Z",
     "iopub.status.busy": "2025-04-24T08:17:24.622734Z",
     "iopub.status.idle": "2025-04-24T08:17:24.635792Z",
     "shell.execute_reply": "2025-04-24T08:17:24.634350Z"
    },
    "papermill": {
     "duration": 0.020117,
     "end_time": "2025-04-24T08:17:24.637469",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.617352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4999 entries, 0 to 4998\n",
      "Data columns (total 7 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   job_id           4999 non-null   object\n",
      " 1   title            4999 non-null   object\n",
      " 2   description      4999 non-null   object\n",
      " 3   required_skills  4999 non-null   object\n",
      " 4   location         4999 non-null   object\n",
      " 5   salary_min       4999 non-null   int64 \n",
      " 6   salary_max       4999 non-null   int64 \n",
      "dtypes: int64(2), object(5)\n",
      "memory usage: 273.5+ KB\n"
     ]
    }
   ],
   "source": [
    "jobs_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eaa7bc3",
   "metadata": {
    "papermill": {
     "duration": 0.003938,
     "end_time": "2025-04-24T08:17:24.645791",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.641853",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Create Matched Pairs (Features + Labels)\n",
    "\n",
    "I will the the following to create a supervised ML model:\n",
    "\n",
    "- Inputs: combined features in this case job + candidate\n",
    "- Label: (1) for good match and (0) for not\n",
    "\n",
    "Since this data set was a synthetic data set generated by one of my python code, I will be using a rule based labelling to create our target variable by defining a simple matching rules based on overlapping skills, salaries, and so on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "85ab147a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:24.655287Z",
     "iopub.status.busy": "2025-04-24T08:17:24.654924Z",
     "iopub.status.idle": "2025-04-24T08:17:25.425892Z",
     "shell.execute_reply": "2025-04-24T08:17:25.424937Z"
    },
    "papermill": {
     "duration": 0.778078,
     "end_time": "2025-04-24T08:17:25.427994",
     "exception": false,
     "start_time": "2025-04-24T08:17:24.649916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def match_pairs_gen(jobs, candidates, num_pairs=1000):\n",
    "    data = []\n",
    "    for _ in range(num_pairs):\n",
    "        job = jobs.sample(1).iloc[0]\n",
    "        candidate = candidates.sample(1).iloc[0]\n",
    "        label = int(any(skill.strip() in candidate['skills'] for skill in job['required_skills'].split(',')))\n",
    "        data.append({\n",
    "            \"job_id\": job['job_id'],\n",
    "            \"candidate_id\": candidate['candidate_id'],\n",
    "            \"job_description\": job['description'],\n",
    "            \"job_required_skills\": job['required_skills'],\n",
    "            \"job_location\": job['location'],\n",
    "            \"job_salary_min\": job['salary_min'],\n",
    "            \"job_salary_max\": job['salary_max'],\n",
    "            \"candidate_skills\": candidate['skills'],\n",
    "            \"experience_years\": candidate['experience_years'],\n",
    "            \"preferred_location\": candidate['preferred_location'],\n",
    "            \"expected_salary\": candidate['expected_salary'],\n",
    "            \"label\": label\n",
    "            \n",
    "        })\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "match_df = match_pairs_gen(jobs_df, candidates_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b25eb87",
   "metadata": {
    "papermill": {
     "duration": 0.004197,
     "end_time": "2025-04-24T08:17:25.436967",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.432770",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing Pipeline\n",
    "I will use the ColumnTransformer to handle the various type of columns. at this step i will vectorize and normalize where neccesary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "39cf60b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:25.447113Z",
     "iopub.status.busy": "2025-04-24T08:17:25.446765Z",
     "iopub.status.idle": "2025-04-24T08:17:25.454874Z",
     "shell.execute_reply": "2025-04-24T08:17:25.454047Z"
    },
    "papermill": {
     "duration": 0.015119,
     "end_time": "2025-04-24T08:17:25.456603",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.441484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Defining features and label\n",
    "X = match_df.drop(columns=[\"label\", \"job_id\", \"candidate_id\"])\n",
    "y = match_df[\"label\"]\n",
    "\n",
    "\n",
    "\n",
    "# Columns to preprocess\n",
    "text_features = [\"job_description\", \"job_required_skills\", \"candidate_skills\"]\n",
    "categorical_features = [\"job_location\", \"preferred_location\"]\n",
    "numeric_features = [\"job_salary_min\", \"job_salary_max\", \"experience_years\", \"expected_salary\"]\n",
    "\n",
    "# Preprocessing of each column type\n",
    "preprocessor = ColumnTransformer([\n",
    "    (\"text\", TfidfVectorizer(), \"job_description\"),\n",
    "    (\"skills_job\", TfidfVectorizer(), \"job_required_skills\"),\n",
    "    (\"skills_candidate\", TfidfVectorizer(), \"candidate_skills\"),\n",
    "    (\"cat\", OneHotEncoder(), categorical_features),\n",
    "    (\"num\", StandardScaler(), numeric_features)\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "848d3443",
   "metadata": {
    "papermill": {
     "duration": 0.003848,
     "end_time": "2025-04-24T08:17:25.464626",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.460778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Full Model Pipeline\n",
    "\n",
    "I will be using the RandomForestClassifier as it is easy to use and handle mixed data types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3af93144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:25.475346Z",
     "iopub.status.busy": "2025-04-24T08:17:25.474295Z",
     "iopub.status.idle": "2025-04-24T08:17:25.865578Z",
     "shell.execute_reply": "2025-04-24T08:17:25.864427Z"
    },
    "papermill": {
     "duration": 0.398525,
     "end_time": "2025-04-24T08:17:25.867589",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.469064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Full pipeline\n",
    "pipeline = Pipeline([\n",
    "    (\"preprocessor\", preprocessor),\n",
    "    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n",
    "])\n",
    "\n",
    "# Train and test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Training the pipeline\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "#Prediction and evaluation\n",
    "y_pred = pipeline.predict(X_test)\n",
    "report = classification_report(y_test, y_pred, output_dict=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8562c896",
   "metadata": {
    "papermill": {
     "duration": 0.003878,
     "end_time": "2025-04-24T08:17:25.875820",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.871942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model Performance\n",
    "\n",
    "- According to the report bellow this model is very good at idetifying actual matches hence the high recall for class (1).\n",
    "- It is less confident in identifying non-matches and some bad matches might still sneak through hence the lower recall value for class (0).\n",
    "- The overall F1 score lookes good consindering the fact our data is synthetic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "67476d07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-24T08:17:25.885588Z",
     "iopub.status.busy": "2025-04-24T08:17:25.885225Z",
     "iopub.status.idle": "2025-04-24T08:17:25.901337Z",
     "shell.execute_reply": "2025-04-24T08:17:25.900271Z"
    },
    "papermill": {
     "duration": 0.023181,
     "end_time": "2025-04-24T08:17:25.903020",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.879839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score support\n",
      "0             0.571429  0.090909     0.157    44.0\n",
      "1             0.792746  0.980769     0.877   156.0\n",
      "accuracy                             0.785        \n",
      "macro avg     0.682087  0.535839     0.517   200.0\n",
      "weighted avg  0.744056     0.785     0.718   200.0\n"
     ]
    }
   ],
   "source": [
    "pretty_report(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4412e8f7",
   "metadata": {
    "papermill": {
     "duration": 0.003798,
     "end_time": "2025-04-24T08:17:25.910986",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.907188",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model improvement\n",
    "\n",
    "I will do the following to improve the model performance:\n",
    "\n",
    "- Balance the Dataset\n",
    "- Enhance the Features\n",
    "- Hyperparameter Tuning\n",
    "- Export the Pipeline\n",
    "- Recommender Function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77a22674",
   "metadata": {
    "papermill": {
     "duration": 0.003664,
     "end_time": "2025-04-24T08:17:25.918586",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.914922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Balance the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80cfbbaa",
   "metadata": {
    "papermill": {
     "duration": 0.003598,
     "end_time": "2025-04-24T08:17:25.926093",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.922495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1702e2a6",
   "metadata": {
    "papermill": {
     "duration": 0.003592,
     "end_time": "2025-04-24T08:17:25.933468",
     "exception": false,
     "start_time": "2025-04-24T08:17:25.929876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7224979,
     "sourceId": 11520209,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.134185,
   "end_time": "2025-04-24T08:17:26.960256",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-24T08:17:14.826071",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
